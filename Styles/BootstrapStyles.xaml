<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Basic Bootstrap Button Style -->
    <Style x:Key="BootstrapButton"
           TargetType="Button">
        <Setter Property="Padding"
                Value="6,12" />
        <Setter Property="Margin"
                Value="0,0,0,0" />
        <Setter Property="FontSize"
                Value="11" />
        <Setter Property="FontWeight"
                Value="Normal" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="BorderThickness"
                Value="1" />
        <!--<Setter Property=""
                Value="4" />-->
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <!-- Modify for hover effect similar to Bootstrap -->
                            <!--<Setter TargetName="Border"
                                    Property="Background"
                                    Value="#E6E6E6" />-->
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <!-- Modify for pressed effect similar to Bootstrap -->
                            <!--<Setter TargetName="Border"
                                    Property="Background"
                                    Value="#D4D4D4" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Bootstrap Primary Button Style -->
    <Style x:Key="BootstrapButtonPrimary"
           BasedOn="{StaticResource BootstrapButton}"
           TargetType="Button">
        <Setter Property="Background"
                Value="#007BFF" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderBrush"
                Value="#007BFF" />
        <Setter Property="BorderThickness" 
                Value="0"/>
        <Style.Triggers>
            <!-- Define a deeper color for IsMouseOver state -->
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="#0069D9" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Bootstrap Secondary Button Style -->
    <Style x:Key="BootstrapButtonSecondary"
           BasedOn="{StaticResource BootstrapButton}"
           TargetType="Button">
        <Setter Property="Background"
                Value="#6C757D" />
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="BorderBrush"
                Value="#6C757D" />
        <Style.Triggers>
            <!-- Define a deeper color for IsMouseOver state -->
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="#5A646B" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Bootstrap Yellow Button Style -->
    <Style x:Key="BootstrapButtonYellow"
           BasedOn="{StaticResource BootstrapButton}"
           TargetType="Button">
        <Setter Property="Background"
                Value="#fdcb9e" />
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground"
                Value="#3f3f44" />
        <!-- Assuming black text on this yellow background for readability -->
        <Setter Property="BorderBrush"
                Value="#fdcb9e" />
        <Style.Triggers>
            <!-- Define a deeper color for IsMouseOver state. 
             You can adjust this to a suitable shade if needed. -->
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="#f2b881" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Bootstrap Link Button Style -->
    <Style x:Key="BootstrapButtonLink"
           BasedOn="{StaticResource BootstrapButton}"
           TargetType="Button">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="#007BFF" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="0" />
        <Style.Triggers>
            <!-- Define a deeper color for IsMouseOver state -->
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Foreground"
                        Value="#0056b3" />
                <Setter Property="TextBlock.TextDecorations"
                        Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>

    

    <!--ComboboxItem 样式-->
    <Style x:Key="ComboboxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Foreground" Value="#787878"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="itemBorder" Height="25"  Background="#f7f7f7" Margin="2" CornerRadius="3">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" Value="#DBDBDB" TargetName="itemBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Combobox中按钮样式-->
    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="MinHeight" Value="22"></Setter>
        <Setter Property="MinWidth" Value="60"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border CornerRadius="3" BorderThickness="0" Background="#f7f7f7">
                        </Border>
                        <!--倒三角的颜色#0099ff-->
                        <Path Height="5" x:Name="Path1" HorizontalAlignment="Right" 
                                VerticalAlignment="Center" Margin="5,0,8,0" Width="8"
                                Fill="#FFA8AAAC" Stretch="Fill" Stroke="#808080"
                                Data="M0.5,0.5 L9.5,0.5 L5.0625,9.5 L5.0625,9.5 z" >
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <!--移入时按钮颜色 -->
                            <Setter TargetName="Path1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"></Setter>
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Combobox样式-->
    <Style x:Key="MyCbbStyle" TargetType="ComboBox">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid x:Name="mainGrid" Background="Transparent">
                        <Popup 
                              IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" AllowsTransparency="True">

                            <Border MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                          VerticalScrollBarVisibility="Auto"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <StackPanel Background="White"
                                            IsItemsHost="True"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton Style="{StaticResource ComboBoxToggleButtonStyle}"  Background="#f7f7f7"
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"  />
                        <TextBlock Text="{TemplateBinding Text}" FontSize="11"  Margin="10 0 0 0" VerticalAlignment="Center" IsHitTestVisible="False" />
                        <!--<TextBlock Text="{TemplateBinding Text}" Foreground="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=ComboBox}, Converter={StaticResource ItemToColorConverter}}" FontSize="11" Margin="10 0 0 0" VerticalAlignment="Center" IsHitTestVisible="False" />-->

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
  

    <!--RadioButton样式-->
    <Style x:Key="RadioButtonStyle" TargetType="RadioButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Ellipse x:Name="OuterEllipse" Width="18" Height="18" Stroke="#e1e0e0" StrokeThickness="2" Fill="Transparent" />
                        <Ellipse x:Name="InnerEllipse" Width="10" Height="10" Stroke="#cceabb" StrokeThickness="2" Fill="#cceabb" Visibility="Collapsed" Grid.Column="0" />
                        <ContentPresenter Grid.Column="1" VerticalAlignment="Center" Margin="5,0,15,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterEllipse" Property="Stroke" Value="#cceabb" />
                            <Setter TargetName="OuterEllipse" Property="Fill" Value="White" />
                            <Setter TargetName="InnerEllipse" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterEllipse" Property="Stroke" Value="#cceabb" />
                            <Setter TargetName="OuterEllipse" Property="Fill" Value="White" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="OuterEllipse" Property="Stroke" Value="#e1e0e0" />
                            <Setter TargetName="OuterEllipse" Property="Fill" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <!--CheckBox样式-->
    <Style x:Key="MyCheckBox" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.Column="0" Background="Transparent" BorderBrush="LightGray" BorderThickness="2" CornerRadius="3"/>
                        <Path x:Name="Checkmark" Grid.Column="0" Width="15" Height="15" Stretch="Uniform" Stroke="White" StrokeThickness="2" Data="M 0 5 L 5 10 L 12 0" Visibility="Collapsed"/>
                       <ContentPresenter Grid.Column="1" VerticalAlignment="Center" Margin="5,0,0,0"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#cceabb"  />
                            <Setter TargetName="Border"  Property="BorderBrush" Value="#cceabb" />
                            <Setter TargetName="Checkmark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="White"/>
                            <Setter TargetName="Checkmark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value> 
        </Setter>    
    </Style>



    <!--计数器按钮 样式-->
    <Style x:Key="CountxToggleButtonStyleup" TargetType="ToggleButton">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>                     
                        <Path Height="5" x:Name="Path1" HorizontalAlignment="Right" 
                              VerticalAlignment="Center" Width="8"
                              Fill="#FFA8AAAC" Stretch="Fill" Stroke="#808080"
                              Data="M0.5,0.5 L9.5,0.5 L5.0625,-9.5 L5.0625,-9.5 z" >
                        </Path>
                              
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <!--移入时按钮颜色 -->                            
                            <Setter TargetName="Path1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CountxToggleButtonStyledown" TargetType="ToggleButton">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>                 
                        <!--倒三角的颜色#0099ff-->
                        <Path Height="5" x:Name="Path2" HorizontalAlignment="Right" 
                              VerticalAlignment="Center"  Width="8"
                              Fill="#FFA8AAAC" Stretch="Fill" Stroke="#808080"
                              Data="M0.5,0.5 L9.5,0.5 L5.0625,9.5 L5.0625,9.5 z" >
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <!--移入时按钮颜色 -->
                            <Setter TargetName="Path2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"></Setter>                           
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--计数器 样式-->
    <Style TargetType="TextBox" x:Key="CustomTextBoxStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Rectangle Fill="#f7f7f7" RadiusX="8" RadiusY="8"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="3*"/>
                                <ColumnDefinition Width="26"/>
                            </Grid.ColumnDefinitions>
                            <TextBox  Grid.Column="0" Background="Transparent" BorderThickness="0" Height="40"/>
                            <StackPanel Grid.Column="1"  Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ToggleButton  Style="{StaticResource CountxToggleButtonStyleup}"  Background="#f7f7f7" Margin="0,0,0,2"/>
                                <ToggleButton  Style="{StaticResource CountxToggleButtonStyledown}"  Background="#f7f7f7" />
                            </StackPanel>
                        </Grid>
                    </Grid>                   
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    



</ResourceDictionary>
    


